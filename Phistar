const fs = require('fs');
const path = require('path');

// Define the expected values for the critical global variables
const expectedValues = {
    botname: 'BigDaddy V1',    // Expected bot name
    link: 'https://whatsapp.com/channel/0029VagdMGd6LwHms3wqEm0m',  // Expected link
};

// Path to the file to check
const filePath = path.join(__dirname, 'Phistarbots.js');

// Function to check the integrity of the Phistarbots.js file
async function checkAntiClone() {
    // Check if the file exists
    if (fs.existsSync(filePath)) {
        // Read the content of the file
        const fileContent = fs.readFileSync(filePath, 'utf-8');

        // Initialize validation flag
        let validationPassed = true;

        // Check for the expected values for each global variable in the file content
        Object.entries(expectedValues).forEach(([key, value]) => {
            const regex = new RegExp(`global.${key} = '${value}'`);
            if (!regex.test(fileContent)) {
                console.error(`Missing or incorrect value for ${key}: ${value}`);
                validationPassed = false;
            }
        });

        // If validation failed, spam the message
        if (!validationPassed) {
            console.error('Anti-clone validation failed!');
            setInterval(() => {
                console.error('Corner Idiot, do you think you can clone me? Anti-clone detected');
            }, 1000); // Spam every second
        } else {
            console.log('Integrity check passed: Phistarbots.js is secure.');
        }
    } else {
        // If the file doesn't exist, throw an error and spam the console
        console.error('Corner Idiot, do you think you can clone me? Anti-clone detected');
        setInterval(() => {
            console.error('Corner Idiot, do you think you can clone me? Anti-clone detected');
        }, 1000); // Spam every second
    }
}

checkAntiClone();
